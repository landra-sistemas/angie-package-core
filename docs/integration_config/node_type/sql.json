{
    "id": "bfbe6ea4-303c-44fd-abd8-2bf68fbb38c2",
    "document_type": "node_type",
    "code": "sql",
    "data": {
        "id": "bfbe6ea4-303c-44fd-abd8-2bf68fbb38c2",
        "code": "sql",
        "name": "SQL",
        "group": "Bases de datos",
        "handles": "in,out",
        "defaults": "{\n    \"query\": \"\",\n    \"input_format\": \"json\",\n    \"output_format\": \"json\"\n}",
        "package_code": "angie.core",
        "xml_template": "<route  id=\"{{source}}\">\n    <from uri=\"direct:{{source}}\"/>\n    {{applyUnmarshal input_format}}\n    <setBody>\n        <groovy>\n<![CDATA[\nimport java.sql.*; \nimport groovy.sql.Sql;\nimport java.sql.Driver;\nimport groovy.json.JsonSlurper;\nimport groovy.json.JsonOutput;\n\ndef driver = Class.forName(\"{{safe driver}}\").newInstance() as Driver\n\njava.util.Properties info = new java.util.Properties();\ninfo.put(\"user\", \"{{safe user}}\");\ninfo.put(\"password\", \"{{safe password}}\");\n\ndef connection = driver.connect(\"{{safe url}}\", info);\n\ndef sql = Sql.newInstance(connection)\n\ndef result;\n\njsonBody = JsonOutput.toJson(request.getBody())\ndef parserJson = new JsonSlurper()\ndef body = parserJson.parseText(jsonBody)\n\ndef queryParams = [:]\ndef counterParams = 0;\nfor (paramvalue in {{groovyList query_params}}) {\n    def item = [:]\n    if (paramvalue.scope == \"BODY\") {\n        queryParams[paramvalue.code] = body[paramvalue.value];\n    } else {\n        queryParams[paramvalue.code] = paramvalue.value;\n    }\n}\n\nif ({{type}} == 1) {\n    result = [:];\n    def counter = 0;\n    sql.eachRow(\"{{safe query}}\", queryParams){ row ->\n        def item = [:]\n        (1..row.getMetaData().columnCount).each {\n            item[\"${row.getMetaData().getColumnName( it )}\"] = row[ it - 1 ];\n        }\n        result[counter++] = item;\n    }\n} else { \n    sql.connection.autoCommit = false\n    try {\n        if ({{type}} == 2) {\n            result = sql.executeInsert(\"{{safe query}}\", queryParams);\n        }\n        if ({{type}} == 3) {\n            result = sql.executeUpdate(\"{{safe query}}\", queryParams);\n        }\n        if ({{type}} == 4) {\n            result = sql.execute(\"{{safe query}}\", queryParams);\n        }\n        sql.commit()\n    } catch(Exception ex) {\n        sql.rollback()\n    }\n}\n\nsql.close()\n\nreturn new com.fasterxml.jackson.databind.ObjectMapper().writeValueAsString(result);\n]]>\n        \n        </groovy>\n    </setBody>\n    {{applyMarshal output_format}}\n    {{generateDestination target}}\n</route>",
        "json_ui_schema": "{\n    \"url\": {\n        \"ui:columnSize\": \"9\",\n        \"ui:help\": \"jdbc:[dialect]://[host]:[port]/[database]\"\n    },    \n    \"type\": {\n        \"ui:columnSize\": \"3\"\n    },\n    \"user\": {\n        \"ui:columnSize\": \"4\"\n    },\n    \"password\": {\n        \"ui:columnSize\": \"4\",\n        \"ui:widget\": \"password\"\n    },\n    \"driver\": {\n        \"ui:columnSize\": \"4\",\n        \"ui:help\": \"com.mysql.jdbc.Driver\"\n    },\n    \"query\": {\n        \"ui:columnSize\": \"12\",\n        \"ui:widget\": \"AceEditorWidget\",\n        \"ui:mode\": \"sql\",\n        \"ui:beautify\": true,\n        \"ui:height\": 150\n    }\n}",
        "package_version": "1.1.0",
        "json_data_schema": "{\n    \"description\": \"Execute SQL queries\",\n    \"type\": \"object\",\n    \"required\": [\n        \"url\",\n        \"type\",\n        \"user\",\n        \"password\",\n        \"driver\",\n        \"query\"\n    ],\n    \"properties\": {\n        \"label\": {\n            \"type\": \"string\"\n        },\n        \"url\": {\n            \"title\": \"URL\",\n            \"type\": \"string\"\n        },\n        \"type\": {\n            \"title\": \"Tipo\",\n            \"type\": \"number\",\n            \"enum\": [1, 2, 3, 4],\n            \"enumNames\": [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\"]\n        },\n        \"user\": {\n            \"title\": \"Usuario\",\n            \"type\": \"string\"\n        },\n        \"password\": {\n            \"title\": \"Contraseña\",\n            \"type\": \"string\"\n        },\n        \"driver\": {\n            \"title\": \"Driver\",\n            \"type\": \"string\"\n        },\n        \"query\": {\n            \"title\": \"Query\",\n            \"type\": \"string\"\n        },\n        \"query_params\": {\n            \"title\": \"Parámetros\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"code\",\n                    \"value\",\n                    \"scope\"\n                ],\n                \"properties\": {\n                    \"code\": {\n                        \"title\": \"Clave\",\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"title\": \"Valor\",\n                        \"type\": \"string\"\n                    },\n                    \"scope\": {\n                        \"title\": \"Ámbito\",\n                        \"type\": \"string\",\n                        \"enum\": [\"BODY\", \"CONSTANTE\"],\n                        \"enumNames\": [\"BODY\", \"CONSTANTE\"]\n                    }\n                }\n            }\n        }\n    }\n}",
        "react_component_type": "AngieDefaultNode"
    },
    "package_code": "angie.core",
    "package_version": "1.1.0"
}